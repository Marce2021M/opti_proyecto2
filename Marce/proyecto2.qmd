---
title: Función por optimizar
jupyter: python3
---


$\sum_{k=0}^{np}\sum_{k<j} \frac{1}{\lVert x_{k}-x_{j} \rVert ^{-1}} $


```{python}
# Función por optimizar

import numpy as np

def f_electron(x, puntoInicial = np.array([1,0,0])):
    # x es un vector columna de dimensi ́on 3 ∗ np. (np.array)
    # El punto #, k, xk que quiere colocarse en la esfera,
    # tiene coordenadas (x3∗k, x3k+1, x3∗k+2).
    # Return:
    # f−x valor de la funci ́on a minimizar.
    nproton = len(x)//3 + 1
    x = np.array(x)
    puntoInicial = np.array(puntoInicial)
    x = np.concatenate((puntoInicial, x))
    x = np.reshape(x, (nproton, 3))
    resultado = 0
    for i in range(nproton):
        for j in range(nproton):
            if i < j:
                resultado += 1/np.linalg.norm(x[i]-x[j])
                
    return resultado

def h_esfera(x):
    # versi ́on para usar en programaci ́on cuadr ́atica sucesiva
    # con b ́usqueda de l ́ınea.
    # x es un vector columna de dimensi ́on 3 ∗ np.
    # El punto #, k, xk que quiere colocarse en la esfera,
    # tiene coordenadas (x[3 ∗ k], x[3k + 1], x[3 ∗ k + 2]).
    # Return h−x .
    # h−x es el vector de dimensi ́on np que indica
    # si el punto xk est ́a cerca o no de la esfera.
    # h−x[k] = x[3 ∗ k] ∗ ∗(2) + x[3k + 1] ∗ ∗(2) + x[3 ∗ k + 2] ∗ ∗(2) − 1
    #
    x = np.array(x)
    nproton = len(x)//3 
    x = np.reshape(x, (nproton, 3))
    
    return np.linalg.norm(x, axis = 1)**2 - 1
    
```

```{python}
# Usamos el módulo scipy.optimize para minimizar la función f_electron
from minimize import *

num_points_random = 20
initial_points = np.random.randn(3 * num_points_random)
initial_norms = np.linalg.norm(initial_points.reshape(num_points_random, 3), axis=1)
initial_points /= initial_norms[:, np.newaxis].repeat(3, axis=1).flatten()


resultado = minimize_func(f_electron, initial_points, h_esfera)
resultado
```



```{python}
np.linalg.norm(h_esfera(resultado.x))
```

# Gráfica de los resultados

```{python}
import plotly.graph_objects as go
import numpy as np

# Supongamos que esta es la salida de tu optimización, por ejemplo
points = resultado.x.reshape(-1, 3)

# Crear la figura
fig = go.Figure()

# Añadir los puntos optimizados al gráfico
fig.add_trace(go.Scatter3d(
    x=points[:, 0],
    y=points[:, 1],
    z=points[:, 2],
    mode='markers',
    marker=dict(
        size=5,
        color='red',                # set color to an array/list of desired values
        colorscale='Viridis',       # choose a colorscale
        opacity=0.8
    )
))

# Añadir la esfera unitaria al gráfico
u = np.linspace(0, 2 * np.pi, 100)
v = np.linspace(0, np.pi, 100)
x = np.outer(np.cos(u), np.sin(v))
y = np.outer(np.sin(u), np.sin(v))
z = np.outer(np.ones(np.size(u)), np.cos(v))

fig.add_trace(go.Surface(x=x, y=y, z=z, opacity=0.3, showscale=False))

# Actualizar los aspectos del gráfico para igualar los aspectos de los ejes
fig.update_layout(
    scene = dict(
        xaxis=dict(nticks=4, range=[-1,1]),
        yaxis=dict(nticks=4, range=[-1,1]),
        zaxis=dict(nticks=4, range=[-1,1])
    ),
    title_text="Optimización sobre Esfera Unitaria",
    scene_aspectmode='cube'
)

# Mostrar el gráfico
fig.show()

```



